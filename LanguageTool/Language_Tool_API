import language_tool_python

class LanguageToolAPI:
    # Initialisierung des LanguageTool-Wrappers
    def __init__(self, language):
        self.tool = language_tool_python.LanguageToolPublicAPI(language)

    # Funktion zum Korrigieren von Fehlern mithilfe des LanguageTool-Wrappers
    def correct_mistake(self, text): 
        return self.tool.correct(text)

    # Funktion zum Überprüfen der Grammatik und der Rechtschreibung mithilfe des LanguageTool-Wrappers
    def check_grammar(self, text):
        return self.tool.check(text)

    # Funktion zum Hinzufügen von Wörtern zum Wörterbuch
    def add_word_to_dict(self, word):
        self.tool._register_spellings(word)

    # Funktion zum Entfernen von Wörtern aus dem Wörterbuch
    def remove_word_from_dict(self):
        self.tool._unregister_spellings()

    # Schließen des LanguageTool-Servers
    def close(self):
        self.tool.close()

tool_api = LanguageToolAPI('de-DE')

def read_text():
    with open('LanguageTool/Language_Tool_Local', 'r') as file:
        text = file.read()
        return text

def test_correct():
    text = read_text()
    return tool_api.correct_mistake(text)

def test_check():
    text = read_text()
    mistakes = tool_api.check_grammar(text)
    # Wenn keine Fehler gefunden wurden, wird eine entsprechende Meldung ausgegeben
    if(mistakes is None):
        print("Keine Fehler gefunden!")
    # Zur Demonstration werden die gefundenen Fehler ausgegeben
    else:
        for mistake in mistakes:
            print(mistake.offset,mistake.errorLength, mistake.replacements)

def main():
    print(test_correct())
    test_check()

if __name__ == "__main__":
    main()
    tool_api.close()


# noch nicht funktionell
# def test_add_word_to_dict(word):
#     return tool_api.add_word_to_dict(word)

# def test_remove_word_from_dict():
#     tool_api.remove_word_from_dict()